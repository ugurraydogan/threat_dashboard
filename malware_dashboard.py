import os
import threading
import time
import requests
import psutil
from scapy.all import sniff, IP, TCP, UDP
from flask import Flask, render_template, request, jsonify
from flask_socketio import SocketIO
from urllib.parse import urljoin
from bs4 import BeautifulSoup

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
socketio = SocketIO(app)

BLACKLIST = set()

# Basit virüs kontrolü (demo amaçlı)
def scan_url_for_threat(url):
    url = url.lower()
    if any(x in url for x in ['malware', 'trojan', '.zip', 'base64', 'evil', 'payload']):
        return {'status': 'danger', 'malicious': 1, 'suspicious': 2}
    elif any(x in url for x in ['cdn', 'iframe', 'load']):
        return {'status': 'warning', 'malicious': 0, 'suspicious': 1}
    return {'status': 'safe', 'malicious': 0, 'suspicious': 0}

def extract_links(html, base_url):
    soup = BeautifulSoup(html, 'html.parser')
    tags = soup.find_all(['a', 'script', 'iframe'])
    links = set()
    for tag in tags:
        href = tag.get('href') or tag.get('src')
        if href:
            full_url = urljoin(base_url, href)
            links.add(full_url)
    return links

def deep_scan_url(base_url):
    try:
        resp = requests.get(base_url, timeout=5)
        all_links = extract_links(resp.text, base_url)
        socketio.emit('deep_scan', {'url': base_url, 'status': 'scanning'})
        result = scan_url_for_threat(base_url)
        socketio.emit('deep_scan', {'url': base_url, **result})
        for link in all_links:
            try:
                res = scan_url_for_threat(link)
                socketio.emit('deep_scan', {'url': link, **res})
            except:
                socketio.emit('deep_scan', {'url': link, 'status': 'error'})
    except:
        socketio.emit('deep_scan', {'url': base_url, 'status': 'unreachable'})

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/scan_url', methods=['POST'])
def scan_url():
    url = request.form.get('url')
    result = scan_url_for_threat(url)
    return jsonify({'status': result['status']})

@app.route('/scan_url_deep', methods=['POST'])
def scan_url_deep():
    url = request.form.get('url')
    threading.Thread(target=deep_scan_url, args=(url,), daemon=True).start()
    return jsonify({'status': 'scanning'})

def packet_callback(packet):
    if IP in packet:
        proto = ''
        if TCP in packet:
            proto = f"TCP {packet[TCP].sport}->{packet[TCP].dport}"
        elif UDP in packet:
            proto = f"UDP {packet[UDP].sport}->{packet[UDP].dport}"
        else:
            proto = "IP"
        data = {
            'time': time.strftime('%H:%M:%S'),
            'src': packet[IP].src,
            'dst': packet[IP].dst,
            'proto': proto,
            'blocked': packet[IP].src in BLACKLIST
        }
        socketio.emit('new_packet', data)

def start_sniffer():
    sniff(prn=packet_callback, store=False)

def monitor_system():
    while True:
        cpu = psutil.cpu_percent(interval=1)
        mem = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent
        socketio.emit('system_stats', {'cpu': cpu, 'memory': mem, 'disk': disk})
        time.sleep(5)

if __name__ == '__main__':
    threading.Thread(target=start_sniffer, daemon=True).start()
    threading.Thread(target=monitor_system, daemon=True).start()
    socketio.run(app, host='0.0.0.0', port=5000)
